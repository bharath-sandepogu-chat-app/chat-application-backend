name: Build and Deploy

on:
  push:
    branches:
      - test

env:
  WORKLOAD_IDENTITY_PROVIDER: 'projects/316198024683/locations/global/workloadIdentityPools/github-actions/providers/github-actions-providers'
  SERVICE_ACCOUNT: 'chat-application@chat-app-398717.iam.gserviceaccount.com'
  REGISTRY: 'us-central1-docker.pkg.dev'
  PROJECT_ID: 'chat-app-398717'
  REPOSITORY: 'chat-application-repo'
  IMAGE_DIR: 'chat_application'
  IMAGE_TAG: ${{ github.sha }}
  REGION: 'us-central1'
  PORT: 8000
  DOCKERFILE_PATH: '../'
  CLOUD_RUN_SERVICE: 'chat-application-deploy'

jobs:
  setup_node:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

  build_and_push:
    runs-on: ubuntu-latest
    needs: setup_node

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: 'Authenticating to Google Artifact Registry'
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.REGISTRY }}
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Build Docker image
        id: docker_build
        run: |
          ls
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }} ${{ env.DOCKERFILE_PATH }}
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }}"
          echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Push Docker image to GCR
        run: |
          docker push ${IMAGE_NAME}

      # - name: Build, Tag Docker image and push to Google Artifact Registry
      #   id: docker-push-tagged
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: northamerica-northeast2-docker.pkg.dev/damg7245-assignment-04/streamlit_application:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: 'Authenticating to Google Artifact Registry'
        uses: 'docker/login-action@v1'
        with:
          registry: ${{ env.REGISTRY }}
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Pull latest image from Google Artifact Registry
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }}

      - name: Deploy with the new image
        run: |
          echo ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }}
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_DIR }}:${{ env.IMAGE_TAG }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --port=${{ env.PORT }} \
            --allow-unauthenticated